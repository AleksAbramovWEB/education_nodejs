<script>

    const person = {
        name: 'Aleks',
        age: 30,
        job: 'hello',

    }


    const op = new Proxy(person,{ // обьект на который вешаем прокси
        get(target, p, receiver) {
            console.log(  'target:', target)
            console.log(  'p:', p)
            console.log(  'receiver:', receiver)
            return target[p]
        },
        set(target, prop, value, receiver) {
            if (prop in target){
                target[prop] = value
                console.log(  'свойство изменено на:', target[prop])
            }else {
                throw new Error(`нет такого свойства: ${prop}`)
            }
        },
        has(target, p) { // определяет если такое свойство в обьекте
            return ['age', 'job'].includes(p) // своя логика
        },
        deleteProperty(target, p, attributes) {
            console.log('delete', p)
            delete target[p]
            return true
        }
    })

    // console.log(op)
   // delete op.age

    // проксирование над функиями

    const  log = text => `Log: ${text}`

    const fp = new Proxy(log, {
        apply(target, thisArg, argArray) { // срабатывает при вызове шункии
            console.log(  'target:', target)
            console.log(  'thisArg:', thisArg)
            console.log(  'argArray:', argArray)

          return   target.apply(thisArg, argArray)
        }
    })

    console.log(fp('dd2'));

    // проксирование классов

    class Person {
        constructor(name, age) {
            this.name =name
            this.age = age
        }
    }

    const PersonProxy = new Proxy(Person, {
        construct(target, argArray, newTarget) {
            console.log('ddddd')
            return new target(...argArray)
        }
    })

    const p = new PersonProxy('eqcdsf', 99)
    console.log(p)

    //WRAPPER

    const  withDefaultValue = (target, defaultValue = 0) => {
        return new Proxy(target, {
            get: (obj, prop) => (prop in obj ? obj[prop] : defaultValue)
        })
    }

    const  position = withDefaultValue({x: 24, y:42})

    console.log(position.ddd)

    // Hidden properies
    const withHiddenProps = (target, prefix = '_') => {
        return new Proxy(target, {
            has: (obj, prop) => prop in obj && !prop.startsWith(prefix),
            ownKeys: obj => Reflect.ownKeys(obj).filter(p => !p.startsWith(prefix)),
            get: (obj, prop, receiver) => (prop in receiver ? obj[prop] : void 0)
        })
    }

    const data = withHiddenProps({
        name: 'Vladilen',
        age: 25,
        _uid: '1231231'
    })

    // Optimization
    const IndexedArray = new Proxy(Array, {
        construct(target, [args]) {
            const index = {}
            args.forEach(item => (index[item.id] = item))

            return new Proxy(new target(...args), {
                get(arr, prop) {
                    switch (prop) {
                        case 'push':
                            return item => {
                                index[item.id] = item
                                arr[prop].call(arr, item)
                            }
                        case 'findById':
                            return id => index[id]
                        default:
                            return arr[prop]
                    }
                }
            })
        }
    })

    const users = new IndexedArray([
        { id: 11, name: 'Vladilen', job: 'Fullstack', age: 25 },
        { id: 22, name: 'Elena', job: 'Student', age: 22 },
        { id: 33, name: 'Victor', job: 'Backend', age: 23 },
        { id: 44, name: 'Vasilisa', job: 'Teacher', age: 24 }
    ])

</script>